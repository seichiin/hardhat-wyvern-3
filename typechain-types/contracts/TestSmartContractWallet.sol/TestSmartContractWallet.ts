/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface TestSmartContractWalletInterface extends utils.Interface {
  functions: {
    "approveOrder_(address,address,address,address,bytes4,bytes,uint256,uint256,uint256,uint256,bool)": FunctionFragment;
    "registerProxy(address)": FunctionFragment;
    "setApprovalForAll(address,address,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approveOrder_"
      | "registerProxy"
      | "setApprovalForAll"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approveOrder_",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerProxy",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveOrder_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;

  events: {
    "Deposit(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
}

export interface DepositEventObject {
  _from: string;
  _id: BigNumber;
  _value: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface TestSmartContractWallet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestSmartContractWalletInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approveOrder_(
      exchange: PromiseOrValue<string>,
      registry: PromiseOrValue<string>,
      maker: PromiseOrValue<string>,
      staticTarget: PromiseOrValue<string>,
      staticSelector: PromiseOrValue<BytesLike>,
      staticExtradata: PromiseOrValue<BytesLike>,
      maximumFill: PromiseOrValue<BigNumberish>,
      listingTime: PromiseOrValue<BigNumberish>,
      expirationTime: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      orderbookInclusionDesired: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerProxy(
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      registry: PromiseOrValue<string>,
      erc721: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  approveOrder_(
    exchange: PromiseOrValue<string>,
    registry: PromiseOrValue<string>,
    maker: PromiseOrValue<string>,
    staticTarget: PromiseOrValue<string>,
    staticSelector: PromiseOrValue<BytesLike>,
    staticExtradata: PromiseOrValue<BytesLike>,
    maximumFill: PromiseOrValue<BigNumberish>,
    listingTime: PromiseOrValue<BigNumberish>,
    expirationTime: PromiseOrValue<BigNumberish>,
    salt: PromiseOrValue<BigNumberish>,
    orderbookInclusionDesired: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerProxy(
    registry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    registry: PromiseOrValue<string>,
    erc721: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approveOrder_(
      exchange: PromiseOrValue<string>,
      registry: PromiseOrValue<string>,
      maker: PromiseOrValue<string>,
      staticTarget: PromiseOrValue<string>,
      staticSelector: PromiseOrValue<BytesLike>,
      staticExtradata: PromiseOrValue<BytesLike>,
      maximumFill: PromiseOrValue<BigNumberish>,
      listingTime: PromiseOrValue<BigNumberish>,
      expirationTime: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      orderbookInclusionDesired: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerProxy(
      registry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setApprovalForAll(
      registry: PromiseOrValue<string>,
      erc721: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Deposit(address,uint256,uint256)"(
      _from?: PromiseOrValue<string> | null,
      _id?: PromiseOrValue<BigNumberish> | null,
      _value?: null
    ): DepositEventFilter;
    Deposit(
      _from?: PromiseOrValue<string> | null,
      _id?: PromiseOrValue<BigNumberish> | null,
      _value?: null
    ): DepositEventFilter;
  };

  estimateGas: {
    approveOrder_(
      exchange: PromiseOrValue<string>,
      registry: PromiseOrValue<string>,
      maker: PromiseOrValue<string>,
      staticTarget: PromiseOrValue<string>,
      staticSelector: PromiseOrValue<BytesLike>,
      staticExtradata: PromiseOrValue<BytesLike>,
      maximumFill: PromiseOrValue<BigNumberish>,
      listingTime: PromiseOrValue<BigNumberish>,
      expirationTime: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      orderbookInclusionDesired: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerProxy(
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      registry: PromiseOrValue<string>,
      erc721: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveOrder_(
      exchange: PromiseOrValue<string>,
      registry: PromiseOrValue<string>,
      maker: PromiseOrValue<string>,
      staticTarget: PromiseOrValue<string>,
      staticSelector: PromiseOrValue<BytesLike>,
      staticExtradata: PromiseOrValue<BytesLike>,
      maximumFill: PromiseOrValue<BigNumberish>,
      listingTime: PromiseOrValue<BigNumberish>,
      expirationTime: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      orderbookInclusionDesired: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerProxy(
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      registry: PromiseOrValue<string>,
      erc721: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
