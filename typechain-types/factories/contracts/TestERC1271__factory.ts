/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  TestERC1271,
  TestERC1271Interface,
} from "../../contracts/TestERC1271";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_hash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "_signature",
        type: "bytes",
      },
    ],
    name: "isValidSignature",
    outputs: [
      {
        internalType: "bytes4",
        name: "magicValue",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ownerAddr",
        type: "address",
      },
    ],
    name: "setOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610250806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806313af40351461003b5780631626ba7e14610063575b600080fd5b6100616004803603602081101561005157600080fd5b50356001600160a01b031661012d565b005b6101106004803603604081101561007957600080fd5b8135919081019060408101602082013564010000000081111561009b57600080fd5b8201836020820111156100ad57600080fd5b803590602001918460018302840111640100000000831117156100cf57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061014f945050505050565b604080516001600160e01b03199092168252519081900360200190f35b600080546001600160a01b0319166001600160a01b0392909216919091179055565b60008060008084806020019051606081101561016a57600080fd5b5080516020808301516040938401518451600081528084018087528c905260ff85168187015260608101839052608081018290529451939750909550935060019260a080820193601f1981019281900390910190855afa1580156101d2573d6000803e3d6000fd5b5050604051601f1901516000546001600160a01b039081169116141590506102075750630b135d3f60e11b9250610214915050565b5060009250610214915050565b9291505056fea26469706673582212200de19b2f9b714abc68a8dec8772c100367524004bbfeabfe5a873b6747a0b4c864736f6c63430007050033";

type TestERC1271ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestERC1271ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestERC1271__factory extends ContractFactory {
  constructor(...args: TestERC1271ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestERC1271> {
    return super.deploy(overrides || {}) as Promise<TestERC1271>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestERC1271 {
    return super.attach(address) as TestERC1271;
  }
  override connect(signer: Signer): TestERC1271__factory {
    return super.connect(signer) as TestERC1271__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestERC1271Interface {
    return new utils.Interface(_abi) as TestERC1271Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestERC1271 {
    return new Contract(address, _abi, signerOrProvider) as TestERC1271;
  }
}
