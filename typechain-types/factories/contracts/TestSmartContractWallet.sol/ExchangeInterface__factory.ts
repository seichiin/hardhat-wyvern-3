/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ExchangeInterface,
  ExchangeInterfaceInterface,
} from "../../../contracts/TestSmartContractWallet.sol/ExchangeInterface";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "registry",
        type: "address",
      },
      {
        internalType: "address",
        name: "maker",
        type: "address",
      },
      {
        internalType: "address",
        name: "staticTarget",
        type: "address",
      },
      {
        internalType: "bytes4",
        name: "staticSelector",
        type: "bytes4",
      },
      {
        internalType: "bytes",
        name: "staticExtradata",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "maximumFill",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "listingTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "expirationTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "salt",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "orderbookInclusionDesired",
        type: "bool",
      },
    ],
    name: "approveOrder_",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610129806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063995e819514602d575b600080fd5b60e46004803603610140811015604257600080fd5b6001600160a01b03823581169260208101358216926040820135909216916001600160e01b0319606083013516919081019060a081016080820135640100000000811115608e57600080fd5b820183602082011115609f57600080fd5b8035906020019184600183028401116401000000008311171560c057600080fd5b919350915080359060208101359060408101359060608101359060800135151560e6565b005b505050505050505050505056fea2646970667358221220f2bcb8e7f1d22c89a435ac04fcbb4073e5fe6bc7b62296ad38c4ad4185d89cf064736f6c63430007050033";

type ExchangeInterfaceConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExchangeInterfaceConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ExchangeInterface__factory extends ContractFactory {
  constructor(...args: ExchangeInterfaceConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ExchangeInterface> {
    return super.deploy(overrides || {}) as Promise<ExchangeInterface>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ExchangeInterface {
    return super.attach(address) as ExchangeInterface;
  }
  override connect(signer: Signer): ExchangeInterface__factory {
    return super.connect(signer) as ExchangeInterface__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExchangeInterfaceInterface {
    return new utils.Interface(_abi) as ExchangeInterfaceInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ExchangeInterface {
    return new Contract(address, _abi, signerOrProvider) as ExchangeInterface;
  }
}
