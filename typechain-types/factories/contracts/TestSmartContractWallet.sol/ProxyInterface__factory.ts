/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ProxyInterface,
  ProxyInterfaceInterface,
} from "../../../contracts/TestSmartContractWallet.sol/ProxyInterface";

const _abi = [
  {
    inputs: [],
    name: "registerProxy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50606d80601d6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063ddd81f8214602d575b600080fd5b60336035565b005b56fea2646970667358221220afc257fe3080de5378e8d6266b134310c470566df8debd5456bb4639b442b16e64736f6c63430007050033";

type ProxyInterfaceConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProxyInterfaceConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ProxyInterface__factory extends ContractFactory {
  constructor(...args: ProxyInterfaceConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ProxyInterface> {
    return super.deploy(overrides || {}) as Promise<ProxyInterface>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ProxyInterface {
    return super.attach(address) as ProxyInterface;
  }
  override connect(signer: Signer): ProxyInterface__factory {
    return super.connect(signer) as ProxyInterface__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProxyInterfaceInterface {
    return new utils.Interface(_abi) as ProxyInterfaceInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ProxyInterface {
    return new Contract(address, _abi, signerOrProvider) as ProxyInterface;
  }
}
